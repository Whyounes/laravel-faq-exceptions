<?php


use Mockery as m;
use Whyounes\FaqException\Models\Faq;
use Whyounes\FaqException\Repositories\FaqRepository;

class FaqTest extends TestCase
{
    /**
     * @test
     */
    public function test_codes_attributes_mutator()
    {
        $faq = (new Faq)->fill([
            'exception' => Exception::class,
            'codes' => '404,500'
        ]);

        $this->assertEquals(['404', '500'], $faq->codes);
    }

    /**
     * @test
     */
    public function test_add_code()
    {
        $faq = (new Faq)->fill([
            'exception' => Exception::class,
            'codes' => '404'
        ]);
        $faq->addCode(500);

        $this->assertEquals(['404', '500'], $faq->codes);
    }

    /**
     * @test
     */
    public function test_use_previous_create_faq_from_exception()
    {
        $exception = new \Exception('Test');
        $faqModel = new Faq([
            'exception' => get_class($exception),
            'codes' => '400',
            'url' => 'app.url/faq/general-exceptions'
        ]);

        $stubRepository = m::mock(FaqRepository::class);
        $stubRepository->shouldReceive('save')
            ->once()
            ->andReturn(true);

        $stubRepository->shouldReceive('findWhereException')
            ->once()
            ->andReturn($faqModel);
        $this->app->instance(FaqRepository::class, $stubRepository);

        $createdFaq = Faq::createFromException(new \Exception('Test', 500), 'app.url/faq/general-exceptions');

        $this->assertEquals(['400', '500'], $createdFaq->codes);
    }

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }
}
